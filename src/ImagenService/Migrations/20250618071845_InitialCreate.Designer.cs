// <auto-generated />
using System;
using ImagenService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImagenService.Migrations
{
    [DbContext(typeof(ImagenDbContext))]
    [Migration("20250618071845_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ImagenService.Models.AlgoritmoCompresion", b =>
                {
                    b.Property<int>("IdAlgoritmoCompresion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAlgoritmoCompresion"));

                    b.Property<string>("NombreAlgoritmo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdAlgoritmoCompresion");

                    b.ToTable("AlgoritmosCompresion");

                    b.HasData(
                        new
                        {
                            IdAlgoritmoCompresion = 1,
                            NombreAlgoritmo = "JPEG"
                        },
                        new
                        {
                            IdAlgoritmoCompresion = 2,
                            NombreAlgoritmo = "PNG"
                        },
                        new
                        {
                            IdAlgoritmoCompresion = 3,
                            NombreAlgoritmo = "RLE"
                        });
                });

            modelBuilder.Entity("ImagenService.Models.Comparacion", b =>
                {
                    b.Property<int>("IdComparacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdComparacion"));

                    b.Property<DateTime>("FechaComparacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdImagenOriginal")
                        .HasColumnType("int");

                    b.Property<int>("IdImagenProcesada")
                        .HasColumnType("int");

                    b.Property<byte[]>("ImagenDiferencias")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<double?>("MSE")
                        .HasColumnType("float");

                    b.Property<double?>("PSNR")
                        .HasColumnType("float");

                    b.HasKey("IdComparacion");

                    b.HasIndex("IdImagenOriginal");

                    b.HasIndex("IdImagenProcesada");

                    b.ToTable("Comparaciones");
                });

            modelBuilder.Entity("ImagenService.Models.Imagen", b =>
                {
                    b.Property<int>("IdImagen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImagen"));

                    b.Property<int>("AltoOriginal")
                        .HasColumnType("int");

                    b.Property<int>("AnchoOriginal")
                        .HasColumnType("int");

                    b.Property<byte[]>("DatosImagen")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("FechaCarga")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IdImagen");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("ImagenService.Models.ImagenProcesada", b =>
                {
                    b.Property<int>("IdImagenProcesada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdImagenProcesada"));

                    b.Property<int>("AltoResolucion")
                        .HasColumnType("int");

                    b.Property<int>("AnchoResolucion")
                        .HasColumnType("int");

                    b.Property<byte[]>("DatosProcesados")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("FechaProcesamiento")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdAlgoritmoCompresion")
                        .HasColumnType("int");

                    b.Property<int>("IdImagenOriginal")
                        .HasColumnType("int");

                    b.Property<byte>("ProfundidadBits")
                        .HasColumnType("tinyint");

                    b.Property<double?>("RatioCompresion")
                        .HasColumnType("float");

                    b.HasKey("IdImagenProcesada");

                    b.HasIndex("IdAlgoritmoCompresion");

                    b.HasIndex("IdImagenOriginal");

                    b.ToTable("ImagenesProcesadas");
                });

            modelBuilder.Entity("ImagenService.Models.Comparacion", b =>
                {
                    b.HasOne("ImagenService.Models.Imagen", "ImagenOriginal")
                        .WithMany("ComparacionesOriginal")
                        .HasForeignKey("IdImagenOriginal")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ImagenService.Models.ImagenProcesada", "ImagenProcesada")
                        .WithMany("Comparaciones")
                        .HasForeignKey("IdImagenProcesada")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImagenOriginal");

                    b.Navigation("ImagenProcesada");
                });

            modelBuilder.Entity("ImagenService.Models.ImagenProcesada", b =>
                {
                    b.HasOne("ImagenService.Models.AlgoritmoCompresion", "AlgoritmoCompresion")
                        .WithMany("ImagenesProcesadas")
                        .HasForeignKey("IdAlgoritmoCompresion");

                    b.HasOne("ImagenService.Models.Imagen", "ImagenOriginal")
                        .WithMany("ImagenesProcesadas")
                        .HasForeignKey("IdImagenOriginal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlgoritmoCompresion");

                    b.Navigation("ImagenOriginal");
                });

            modelBuilder.Entity("ImagenService.Models.AlgoritmoCompresion", b =>
                {
                    b.Navigation("ImagenesProcesadas");
                });

            modelBuilder.Entity("ImagenService.Models.Imagen", b =>
                {
                    b.Navigation("ComparacionesOriginal");

                    b.Navigation("ImagenesProcesadas");
                });

            modelBuilder.Entity("ImagenService.Models.ImagenProcesada", b =>
                {
                    b.Navigation("Comparaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
